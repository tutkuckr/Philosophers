
/*
Your program(s) must take the following arguments:
1. number_of_philosophers
2. time_to_die
3. time_to_eat
4. time_to_sleep
5. [number_of_times_each_philosopher_must_eat]

◦ number_of_philosophers: The number of philosophers and also the number of forks.

◦ time_to_die (in milliseconds): If a philosopher has not started eating within
time_to_die milliseconds since their last meal or the start of the simulation, they die.

◦ time_to_eat (in milliseconds): The time it takes for a philosopher to eat.

During that time, they will need to hold two forks.
◦ time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.

◦ number_of_times_each_philosopher_must_eat (optional argument) 
: If all philosophers have eaten at least number_of_times_each_philosopher_must_eat
times, the simulation stops. If not specified, the simulation stops when a philosopher dies.
*/

/*
memset
printf, write
malloc, free
usleep, gettimeofday
pthread_create,
pthread_detach, -> set a thread to 'auto-clean' mode.
pthread_join, -> When a thread completes its execution, it releases internal resources
pthread_mutex_init,
pthread_mutex_destroy
pthread_mutex_lock,
pthread_mutex_unlock
*/

The routine is simple: pick up both forks (think if one of them is not available)→ eat → put down forks → sleep → repeat. Trouble begins when those steps overlap in time. If every philosopher grabs the left fork first, all forks are occupied and no one can collect a second — deadlock. If one glutton keeps winning the race for forks, a neighbour may wait forever — starvation.
